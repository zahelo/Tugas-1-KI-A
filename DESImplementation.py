# -*- coding: utf-8 -*-
"""Copy of DES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zJ1cWhefi8sqVoXbh9By9Na671IX_L8Z
"""

def is_hexadecimal(s):
    try:
        int(s, 16)
        return True
    except ValueError:
        return False

# Tabel permutasi awal untuk menghasilkan kunci (PC1 & PC2)

PC1 = [
        [57, 49, 41, 33, 25, 17, 9], [1, 58, 50, 42, 34, 26, 18], [10, 2, 59, 51, 43, 35, 27], [19, 11, 3, 60, 52, 44, 36],
        [63, 55, 47, 39, 31, 23, 15], [7, 62, 54, 46, 38, 30, 22],[14, 6, 61, 53, 45, 37, 29], [21, 13, 5, 28, 20, 12, 4]
]

PC2 = [
    [14, 17, 11, 24, 1, 5], [3, 28, 15, 6, 21, 10], [23, 19, 12, 4, 26, 8], [16, 7, 27, 20, 13, 2], [41, 52, 31, 37, 47, 55],
    [30, 40, 51, 45, 33, 48], [44, 49, 39, 56, 34, 53], [46, 42, 50, 36, 29, 32]
]

# Tabel rotasi kunci (pergeseran kiri)
Rotation_KEY = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

# Kunci input dalam bentuk heksadesimal
key = '0101010101010101'
klist1 = ["{0:04b}".format(int(i, 16)) for i in key]


# Menggabungkan menjadi string biner 64-bit
k56_final = ''.join(klist1)
k56_list = list(k56_final)

# Permutasi awal pada kunci menggunakan tabel PC1
k_afterpermutation = []
for i in range(8):
    for j in range(7):
        k_afterpermutation.append(k56_list[PC1[i][j]-1])

# Menggabungkan hasil permutasi
klist_final = ''.join(k_afterpermutation)


# Membagi kunci menjadi dua bagian, yaitu Left_key dan Right_key
Left_key = klist_final[:int(len(klist_final)/2)]
Right_key = klist_final[int(len(klist_final)/2):]

Left_keyList = [Left_key]
Right_keyList = [Right_key]

# Melakukan rotasi kiri sebanyak 16 kali berdasarkan tabel rotasi
j = 0
for i in range(len(Rotation_KEY)):
    j = j + Rotation_KEY[i]
    Left_keyList.append(Left_key[j:]+Left_key[:j])
    Right_keyList.append(Right_key[j:]+Right_key[:j])

k_after_PC2_Permutation = []
for i in range(1,len(Left_keyList)):
    m = list(Left_keyList[i]+Right_keyList[i])
    k_for_PC2_Permutation = []
    for i in range(8):
        for j in range(6):
            k_for_PC2_Permutation.append(m[PC2[i][j]-1])
    k_after_PC2_Permutation.append(''.join(k_for_PC2_Permutation))

# Tabel permutasi awal (IP) dan permutasi akhir (IP_inverse)
IP = [
    [58, 50, 42, 34, 26, 18, 10, 2], [60, 52, 44, 36, 28, 20, 12, 4], [62, 54, 46, 38, 30, 22, 14, 6],
    [64, 56, 48, 40, 32, 24, 16, 8], [57, 49, 41, 33, 25, 17, 9, 1], [59, 51, 43, 35, 27, 19, 11, 3],
    [61, 53, 45, 37, 29, 21, 13, 5], [63, 55, 47, 39, 31, 23, 15, 7]
]

IP_inverse = [
    [40, 8, 48, 16, 56, 24, 64, 32], [39, 7, 47, 15, 55, 23, 63, 31], [38, 6, 46, 14, 54, 22, 62, 30],
    [37, 5, 45, 13, 53, 21, 61, 29], [36, 4, 44, 12, 52, 20, 60, 28], [35, 3, 43, 11, 51, 19, 59, 27],
    [34, 2, 42, 10, 50, 18, 58, 26], [33, 1, 41, 9, 49, 17, 57, 25]
]

# Tabel ekspansi untuk bagian kanan pada fungsi F
EP = [
    [32, 1, 2, 3, 4, 5], [4, 5, 6, 7, 8, 9], [8, 9, 10, 11, 12, 13], [12, 13, 14, 15, 16, 17], [16, 17, 18, 19, 20, 21],
    [20, 21, 22, 23, 24, 25], [24, 25, 26, 27, 28, 29], [28, 29, 30, 31, 32, 1]
]
# Tabel permutasi dalam fungsi F
P = [
    [16, 7, 20, 21], [29, 12, 28, 17], [1, 15, 23, 26], [5, 18, 31, 10], [2, 8, 24, 14], [32, 27, 3, 9], [19, 13, 30, 6], [22, 11, 4, 25]
]
# Definisi tabel substitusi (S-Box)
S1 = [
    [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
    [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
]

S2 = [
    [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
    [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
]

S3 = [
    [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
    [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
]

S4 = [
    [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
    [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
]

S5 = [
    [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
    [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
]

S6 = [
    [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
    [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
]

S7 = [
    [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
    [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
]

S8 = [
    [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
    [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
]

# Memasukkan semua S-Box ke dalam dictionary
dict1 = {}

for i in ('S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8'):
    dict1[i] = locals()[i]

# Fungsi XOR sederhana untuk dua string biner
def XOR(a, b, length):
    a1 = list(a)
    b1 = list(b)
    c1 = list()
    for i in range(length):
        c1.append(str(int(a1[i])^int(b1[i])))
    m = ''.join(c1)
    return m

def binaryToDecimal(binary):

    binary1 = binary
    decimal, i, n = 0, 0, 0
    while(binary != 0):
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal


def decimalToBinary(n):
    m = bin(n).replace("0b","")
    return m.zfill(4)

# Fungsi untuk mengenkripsi teks menggunakan DES
def encrypt(list1):
    cipher = []
    Left_msg = ''
    Right_msg = ''
    for i in range(len(list1)):
        partial_msg_list = ["{0:04b}".format(int(j, 16)) for j in list1[i]]
        partial_msg = list(''.join(partial_msg_list))
        partial_msg_string = ''
        for x in range(8):
            for y in range(8):
                partial_msg_string += partial_msg[IP[x][y]-1]

       # Bagi pesan menjadi bagian kiri (Left) dan kanan (Right)
        Left_msg = partial_msg_string[:int(len(partial_msg_string)/2)]
        Right_msg = partial_msg_string[int(len(partial_msg_string)/2):]

      # 16 ronde enkripsi DES
        for j in range(16):
            Left_temp_msg = Right_msg
            f_right_msg = ''
            f_right_list = list(Right_msg)
            for x in range(8):
                for y in range(6):
                    f_right_msg = f_right_msg + f_right_list[EP[x][y]-1]

            m = XOR(k_after_PC2_Permutation[j], f_right_msg, len(f_right_msg))
            B = [m[x:x+6] for x in range(0, len(m),6)]

            S_box_output = ''
            for l in range(len(B)):
                S_box_output+=decimalToBinary(dict1['S'+str(l+1)][binaryToDecimal(int(B[l][0]+B[l][5]))][binaryToDecimal(int(B[l][1:5]))])

            S_box_list = list(S_box_output)
            S_box = ''
            for x in range(8):
                for y in range(4):
                    S_box += S_box_list[P[x][y]-1]


            Right_msg = XOR(Left_msg, S_box, len(S_box))
            Left_msg = Left_temp_msg

        Left_msg, Right_msg = Right_msg, Left_msg

        partial_cipher = Left_msg + Right_msg
        partial_cipher_list = list(partial_cipher)
        bin_cipher_text = ''
        for x in range(8):
            for y in range(8):
                bin_cipher_text += partial_cipher_list[IP_inverse[x][y]-1]

        l11 = [bin_cipher_text[i:i+4] for i in range(0, len(bin_cipher_text),4)]

        l12 = [hex(int(i,2)).replace("0x","") for i in l11]

        # Setelah 16 ronde, gabungkan Left dan Right, lalu lakukan permutasi akhir
        cipher_text = ''.join(l12)
        cipher.append(cipher_text)
    return cipher

def decrypt(cipherText):
    plainText = []
    for i in range(len(cipherText)):

        partial_cipher_list = ["{0:04b}".format(int(j, 16)) for j in cipherText[i]]
        partial_cipher = list(''.join(partial_cipher_list))
        partial_cipher_string = ''

        for x in range(8):
            for y in range(8):
                partial_cipher_string += partial_cipher[IP[x][y]-1]

        Left_msg = partial_cipher_string[:int(len(partial_cipher_string)/2)]
        Right_msg = partial_cipher_string[int(len(partial_cipher_string)/2):]

        for j in range(15,-1, -1):
            Left_temp_msg = Right_msg
            f_right_msg = ''
            f_right_list = list(Right_msg)
            for x in range(8):
                for y in range(6):
                    f_right_msg = f_right_msg + f_right_list[EP[x][y]-1]

            m = XOR(k_after_PC2_Permutation[j], f_right_msg, len(f_right_msg))
            B = [m[x:x+6] for x in range(0, len(m),6)]

            S_box_output = ''
            for l in range(len(B)):
                S_box_output+=decimalToBinary(dict1['S'+str(l+1)][binaryToDecimal(int(B[l][0]+B[l][5]))][binaryToDecimal(int(B[l][1:5]))])

            S_box_list = list(S_box_output)
            S_box = ''
            for x in range(8):
                for y in range(4):
                    S_box += S_box_list[P[x][y]-1]



            Right_msg = XOR(Left_msg, S_box, len(S_box))
            Left_msg = Left_temp_msg

        Left_msg, Right_msg = Right_msg, Left_msg

        partial_cipher = Left_msg + Right_msg
        partial_cipher_list = list(partial_cipher)
        bin_cipher_text = ''
        for x in range(8):
            for y in range(8):
                bin_cipher_text += partial_cipher_list[IP_inverse[x][y]-1]

        l11 = [bin_cipher_text[i:i+4] for i in range(0, len(bin_cipher_text),4)]
        l12 = [hex(int(i,2)).replace("0x","") for i in l11]

        plain_text = ''.join(l12)
        plainText.append(plain_text)
    return plainText

msg = input('Enter a 64-bit hexadecimal plaintext (length must be multiple of 16): ')
if not is_hexadecimal(msg):
    raise ValueError("Input is not a valid hexadecimal string.")

list1 = [msg[i:i+16] for i in range(0, len(msg), 16)]
if len(list1[-1]) != 16:
    list1[-1] += '0' * (16 - len(list1[-1]))

print(f"Input split into 64-bit blocks: {list1}")

m = encrypt(list1)
print(f"Encrypted message: {m}")

y = decrypt(m)
print(f"Decrypted message: {y}")
print(f"Decrypted Text: {''.join(y)}")

if ''.join(y).lower() == msg.lower():
    print("Success: Decryption matches the original plaintext!")
else:
    print("Error: Decryption does not match the original plaintext.")

